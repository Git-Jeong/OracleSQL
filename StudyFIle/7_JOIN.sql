-- JION -----------------------------

-- 직원 ID가 100번인 직원의 부서이름을 출력
-- 직원_ID는 DEPARTMENTS에 있고
-- 부서이름은 DEPARTMENTS에 있음
SELECT D.DEPARTMENT_NAME, 
    D.DEPARTMENT_ID, 
    E.LAST_NAME || ' ' || E.FIRST_NAME AS NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.EMPLOYEE_ID = 100;

-- EMPLOYEES 테이블과 DEPARTMENTS 테이블을 결합하여 각 직원의 ID, 이름, 소속 부서 이름을 조회하는 쿼리
/**/
SELECT E.EMPLOYEE_ID, 
	E.FIRST_NAME, 
	D.DEPARTMENT_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- EMPLOYEES 테이블과 DEPARTMENTS 테이블을 결합하여 각 직원의 ID, 이름, 소속 부서 이름을 조회하는 쿼리
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- EMPLOYEES 테이블과 DEPARTMENTS 테이블을 INNER JOIN하여 각 직원의 ID, 이름, 소속 부서 이름을 조회하는 쿼리
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;


-- EMPLOYEES 테이블과 DEPARTMENTS 테이블을 LEFT JOIN하여 각 직원의 ID, 이름, 소속 부서 이름을 조회하는 쿼리
SELECT *
FROM EMPLOYEES E
LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- EMPLOYEES 테이블과 DEPARTMENTS 테이블을 RIGHT JOIN하여 각 직원의 ID, 이름, 소속 부서 이름을 조회하는 쿼리
-- 부서에 소속된 직원이 없더라도 모든 부서 정보를 결과에 포함
SELECT *
FROM EMPLOYEES E
RIGHT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- EMPLOYEES 테이블과 DEPARTMENTS 테이블을 FULL JOIN하여 각 직원의 ID, 이름, 소속 부서 이름을 조회하는 쿼리
-- 직원이 없는 부서와 부서에 소속되지 않은 직원도 결과에 포함
SELECT *
FROM EMPLOYEES E
FULL JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- EMPLOYEES 테이블을 두 번 사용하여 각 직원과 그 직원의 상사의 ID를 조회하는 쿼리
-- E1은 직원, E2는 상사로 사용하여 직원과 그 상사의 관계를 출력
SELECT *
FROM EMPLOYEES E1, EMPLOYEES E2
WHERE E1.MANAGER_ID = E2.EMPLOYEE_ID;

-- EMPLOYEES 테이블과 DEPARTMENTS 테이블의 모든 조합을 조회하는 쿼리 
SELECT *
FROM EMPLOYEES E
CROSS JOIN DEPARTMENTS D;

-----------------------